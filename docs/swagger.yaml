basePath: /v1
definitions:
  consume.consumeArticleDataMessage:
    properties:
      exchange:
        type: string
      message:
        $ref: '#/definitions/events.ValidationEvent'
      queue:
        type: string
      type:
        type: string
      version:
        type: integer
    type: object
  consume.consumePlaceDataMessage:
    properties:
      exchange:
        type: string
      message:
        $ref: '#/definitions/events.PlacedOrderData'
      queue:
        type: string
      type:
        example: place-order
        type: string
      version:
        type: integer
    type: object
  consume.logoutMessage:
    properties:
      message:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbklEIjoiNjZiNjBlYzhlMGYzYzY4OTUzMzJlOWNmIiwidXNlcklEIjoiNjZhZmQ3ZWU4YTBhYjRjZjQ0YTQ3NDcyIn0.who7upBctOpmlVmTvOgH1qFKOHKXmuQCkEjMV3qeySg
        type: string
      type:
        example: logout
        type: string
    type: object
  emit.ArticleValidationData:
    properties:
      articleId:
        type: string
      referenceId:
        type: string
    type: object
  emit.SendValidationMessage:
    properties:
      exchange:
        type: string
      message:
        $ref: '#/definitions/emit.ArticleValidationData'
      queue:
        type: string
      type:
        type: string
    type: object
  emit.articlePlacedData:
    properties:
      articleId:
        type: string
      quantity:
        type: integer
    type: object
  emit.message:
    properties:
      exchange:
        type: string
      message:
        $ref: '#/definitions/emit.orderPlacedData'
      queue:
        type: string
      type:
        type: string
    type: object
  emit.orderPlacedData:
    properties:
      articles:
        items:
          $ref: '#/definitions/emit.articlePlacedData'
        type: array
      cartId:
        type: string
      orderId:
        type: string
    type: object
  errs.ValidationErr:
    properties:
      messages:
        items:
          $ref: '#/definitions/errs.errField'
        type: array
    type: object
  errs.errField:
    properties:
      message:
        type: string
      path:
        type: string
    type: object
  events.PaymentEvent:
    properties:
      amount:
        type: number
      method:
        $ref: '#/definitions/events.PaymentMethod'
      orderId:
        type: string
    required:
    - amount
    - method
    - orderId
    type: object
  events.PaymentMethod:
    enum:
    - CASH
    - CREDIT
    - DEBIT
    type: string
    x-enum-varnames:
    - Cash
    - Credit
    - Debit
  events.PlacePrderArticleData:
    properties:
      id:
        maxLength: 100
        minLength: 1
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - id
    - quantity
    type: object
  events.PlacedOrderData:
    properties:
      articles:
        items:
          $ref: '#/definitions/events.PlacePrderArticleData'
        type: array
      cartId:
        maxLength: 100
        minLength: 1
        type: string
      userId:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - articles
    - cartId
    - userId
    type: object
  events.ValidationEvent:
    properties:
      articleId:
        type: string
      price:
        type: number
      referenceId:
        type: string
      stock:
        type: integer
      valid:
        type: boolean
    type: object
  order_projection.Article:
    properties:
      articleId:
        maxLength: 100
        minLength: 1
        type: string
      isValid:
        type: boolean
      isValidated:
        type: boolean
      quantity:
        minimum: 1
        type: integer
      unitaryPrice:
        type: number
    required:
    - articleId
    - quantity
    type: object
  order_projection.Order:
    properties:
      articles:
        items:
          $ref: '#/definitions/order_projection.Article'
        type: array
      cartId:
        maxLength: 100
        minLength: 1
        type: string
      created:
        type: string
      id:
        type: string
      orderId:
        maxLength: 100
        minLength: 1
        type: string
      payments:
        items:
          $ref: '#/definitions/order_projection.PaymentEvent'
        type: array
      status:
        $ref: '#/definitions/order_projection.OrderStatus'
      updated:
        type: string
      userId:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - cartId
    - orderId
    - status
    - userId
    type: object
  order_projection.OrderStatus:
    enum:
    - placed
    - invalid
    - validated
    - payment_defined
    type: string
    x-enum-varnames:
    - Placed
    - Invalid
    - Validated
    - Payment_Defined
  order_projection.PaymentEvent:
    properties:
      amount:
        type: number
      method:
        $ref: '#/definitions/events.PaymentMethod'
    type: object
  rest.OrderListData:
    properties:
      articles:
        type: integer
      cartId:
        type: string
      created:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/order_projection.OrderStatus'
      totalPayment:
        type: number
      totalPrice:
        type: number
      updated:
        type: string
    type: object
  server.ErrorData:
    properties:
      error:
        type: string
    type: object
host: localhost:3004
info:
  contact:
    email: nmarsollier@gmail.com
    name: Nestor Marsollier
  description: Microservicio de Ordenes.
  title: OrdersGo
  version: "1.0"
paths:
  /rabbit/article-data:
    get:
      consumes:
      - application/json
      description: Cuando se consume place-order se genera la orden y se inicia el
        proceso.
      parameters:
      - description: Message para Type = place-order
        in: body
        name: place-order
        required: true
        schema:
          $ref: '#/definitions/consume.consumePlaceDataMessage'
      produces:
      - application/json
      responses: {}
      summary: Mensage Rabbit order/article-data
      tags:
      - Rabbit
  /rabbit/cart/article-data:
    put:
      consumes:
      - application/json
      description: Antes de iniciar las operaciones se validan los artículos contra
        el catalogo.
      parameters:
      - description: Mensage de validacion
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/emit.SendValidationMessage'
      produces:
      - application/json
      responses: {}
      summary: Emite Validar Artículos a Cart cart/article-data
      tags:
      - Rabbit
  /rabbit/logout:
    get:
      consumes:
      - application/json
      description: Escucha de mensajes logout desde auth.
      parameters:
      - description: Estructura general del mensage
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/consume.logoutMessage'
      produces:
      - application/json
      responses: {}
      summary: Mensage Rabbit
      tags:
      - Rabbit
    put:
      consumes:
      - application/json
      description: SendOrderPlaced envía un broadcast a rabbit con logout. Esto no
        es Rest es RabbitMQ.
      parameters:
      - description: Order Placed Event
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/emit.message'
      produces:
      - application/json
      responses: {}
      summary: Mensage Rabbit
      tags:
      - Rabbit
  /v1/orders:
    get:
      consumes:
      - application/json
      description: Busca todas las ordenes del usuario logueado.
      parameters:
      - description: bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ordenes
          schema:
            items:
              $ref: '#/definitions/rest.OrderListData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Ordenes de Usuario
      tags:
      - Ordenes
  /v1/orders/:orderId:
    get:
      consumes:
      - application/json
      description: Busca una order del usuario logueado, por su id.
      parameters:
      - description: ID de orden
        in: path
        name: orderId
        required: true
        type: string
      - description: bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ordenes
          schema:
            $ref: '#/definitions/order_projection.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Buscar Orden
      tags:
      - Ordenes
  /v1/orders/:orderId/payment:
    post:
      consumes:
      - application/json
      description: Agrega un Pago
      parameters:
      - description: ID de orden
        in: path
        name: orderId
        required: true
        type: string
      - description: bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Informacion del pago
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/events.PaymentEvent'
      produces:
      - application/json
      responses:
        "200":
          description: Ordenes
          schema:
            $ref: '#/definitions/order_projection.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ValidationErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorData'
      summary: Agrega un Pago
      tags:
      - Ordenes
  /v1/orders/:orderId/update:
    get:
      consumes:
      - application/json
      description: Actualiza las proyecciones en caso que hayamos roto algo.
      parameters:
      - description: bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID de orden
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: No Content
      summary: Actualiza la proyeccion
      tags:
      - Ordenes
swagger: "2.0"
