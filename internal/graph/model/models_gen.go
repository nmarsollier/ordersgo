// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Article struct {
	ID string `json:"id"`
}

func (Article) IsEntity() {}

type ArticleInput struct {
	ArticleID    string  `json:"articleId"`
	Quantity     int     `json:"quantity"`
	IsValid      bool    `json:"isValid"`
	UnitaryPrice float64 `json:"unitaryPrice"`
	IsValidated  bool    `json:"isValidated"`
}

type Mutation struct {
}

type Order struct {
	ID       string          `json:"id"`
	OrderID  string          `json:"orderId"`
	Status   OrderStatus     `json:"status"`
	UserID   string          `json:"userId"`
	CartID   string          `json:"cartId"`
	Articles []*OrderArticle `json:"articles,omitempty"`
	Payments []*PaymentEvent `json:"payments,omitempty"`
}

func (Order) IsEntity() {}

type OrderArticle struct {
	ArticleID    string   `json:"articleId"`
	Article      *Article `json:"article,omitempty"`
	Quantity     int      `json:"quantity"`
	IsValid      bool     `json:"isValid"`
	UnitaryPrice float64  `json:"unitaryPrice"`
	IsValidated  bool     `json:"isValidated"`
}

type OrderSummary struct {
	ID           string      `json:"id"`
	Status       OrderStatus `json:"status"`
	CartID       string      `json:"cartId"`
	TotalPrice   float64     `json:"totalPrice"`
	TotalPayment float64     `json:"totalPayment"`
	Articles     int         `json:"articles"`
}

type PaymentEvent struct {
	Method PaymentMethod `json:"method"`
	Amount float64       `json:"amount"`
}

type PaymentEventInput struct {
	Method PaymentMethod `json:"method"`
	Amount float64       `json:"amount"`
}

type Query struct {
}

type OrderStatus string

const (
	OrderStatusPlaced         OrderStatus = "PLACED"
	OrderStatusInvalid        OrderStatus = "INVALID"
	OrderStatusValidated      OrderStatus = "VALIDATED"
	OrderStatusPaymentDefined OrderStatus = "PAYMENT_DEFINED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPlaced,
	OrderStatusInvalid,
	OrderStatusValidated,
	OrderStatusPaymentDefined,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPlaced, OrderStatusInvalid, OrderStatusValidated, OrderStatusPaymentDefined:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentMethod string

const (
	PaymentMethodCash   PaymentMethod = "CASH"
	PaymentMethodCredit PaymentMethod = "CREDIT"
	PaymentMethodDebit  PaymentMethod = "DEBIT"
)

var AllPaymentMethod = []PaymentMethod{
	PaymentMethodCash,
	PaymentMethodCredit,
	PaymentMethodDebit,
}

func (e PaymentMethod) IsValid() bool {
	switch e {
	case PaymentMethodCash, PaymentMethodCredit, PaymentMethodDebit:
		return true
	}
	return false
}

func (e PaymentMethod) String() string {
	return string(e)
}

func (e *PaymentMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethod", str)
	}
	return nil
}

func (e PaymentMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
